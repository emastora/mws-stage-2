{"version":3,"sources":["dbhelper.js"],"names":["DBHelper","response","status","Promise","resolve","reject","statusText","json","upgradeDb","createObjectStore","keyPath","createIndex","store","console","log","dbPromise","db","transaction","objectStore","getAll","fetch","DATABASE_URL","then","restaurants","restaurantsFromDB","data","openDB","restaurantsFromAPI","saveRestaurants","forEach","restaurant","tx","complete","callback","getRestaurantsFromDB","length","getRestaurantsFromAPI","catch","error","id","fetchRestaurants","r","cuisine","results","filter","cuisine_type","neighborhood","neighborhoods","map","v","i","uniqueNeighborhoods","indexOf","cuisines","uniqueCuisines","imgWidth","arguments","undefined","imageUrlForRestaurant","maps","Marker","position","latlng","title","name","url","animation","google","Animation","DROP"],"mappings":"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","file":"dbhelper.js","sourcesContent":["/**\r\n * Common database helper functions.\r\n */\r\nclass DBHelper {\r\n\r\n    /**\r\n     * Database URL.\r\n     * Change this to restaurants.json file location on your server.\r\n     */\r\n    static get DATABASE_URL() {\r\n        const port = 1337 // Change this to your server port\r\n        return `http://localhost:${port}/restaurants`;\r\n    }\r\n\r\n    /**\r\n     * Check status of Fetch requests.\r\n     */\r\n    static checkStatus(response) {\r\n        if (response.status === 200) {\r\n            return Promise.resolve(response)\r\n        } else {\r\n            return Promise.reject(new Error(`Request has failed. Return status: ${response.statusText}`))\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Convert response to JSON data\r\n     */\r\n    static json(response) {\r\n        return response.json()\r\n    }\r\n\r\n    /**\r\n     * Opens the IndexedDB\r\n     */\r\n    static openDB() {\r\n        const dbPromise = idb.open('restaurantsDB', 1, upgradeDb => {\r\n            const store = upgradeDb.createObjectStore('restaurants', { keyPath: 'id' });\r\n            store.createIndex('by-id', 'id');\r\n        });\r\n        return dbPromise;\r\n    }\r\n\r\n    /**\r\n     * Get the Restaurants from the IDB\r\n     */\r\n    static getRestaurantsFromDB() {\r\n        const restaurantsFromDB = DBHelper.openDB()\r\n            .then(db => {\r\n                console.log('Getting Restaurants From DB');\r\n                if (!db) return;\r\n                let store = db.transaction('restaurants').objectStore('restaurants');\r\n                return store.getAll();\r\n            });\r\n        return restaurantsFromDB;\r\n    }\r\n\r\n    /**\r\n     * Get the Restaurants from the Server API\r\n     */\r\n    static getRestaurantsFromAPI() {\r\n        console.log('Getting Restaurants From API');\r\n        const restaurantsFromAPI = fetch(DBHelper.DATABASE_URL)\r\n            .then(DBHelper.checkStatus)\r\n            .then(DBHelper.json)\r\n            .then(restaurants => {\r\n                DBHelper.saveRestaurants(restaurants);\r\n                return restaurants;\r\n            });\r\n        return restaurantsFromAPI;\r\n    }\r\n\r\n    /**\r\n     * Save restaurant data to IDB\r\n     */\r\n    static saveRestaurants(data) {\r\n        return DBHelper.openDB().then(db => {\r\n            if (!db) return;\r\n            const tx = db.transaction('restaurants', 'readwrite');\r\n            const store = tx.objectStore('restaurants');\r\n            data.forEach((restaurant) => {\r\n                store.put(restaurant);\r\n            });\r\n            return tx.complete;\r\n        }).then(() => {\r\n            console.log('Restaurants Saved')\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all restaurants.\r\n     */\r\n    // static fetchRestaurants(callback) {\r\n    //     let xhr = new XMLHttpRequest();\r\n    //     xhr.open('GET', DBHelper.DATABASE_URL);\r\n    //     xhr.onload = () => {\r\n    //         if (xhr.status === 200) { // Got a success response from server!\r\n    //             const json = JSON.parse(xhr.responseText);\r\n    //             const restaurants = json.restaurants;\r\n    //             callback(null, restaurants);\r\n    //         } else { // Oops!. Got an error from server.\r\n    //             const error = (`Request failed. Returned status of ${xhr.status}`);\r\n    //             callback(error, null);\r\n    //         }\r\n    //     };\r\n    //     xhr.send();\r\n    // }\r\n    static fetchRestaurants(callback) {\r\n        return DBHelper.getRestaurantsFromDB().then(restaurants => {\r\n            if (restaurants.length) {\r\n                return Promise.resolve(restaurants);\r\n            } else {\r\n                return DBHelper.getRestaurantsFromAPI();\r\n            }\r\n        }).then(restaurants => {\r\n            callback(null, restaurants);\r\n        }).catch(error => {\r\n            callback(error, null);\r\n        })\r\n    }\r\n\r\n    /**\r\n     * Fetch a restaurant by its ID.\r\n     */\r\n    static fetchRestaurantById(id, callback) {\r\n        // fetch all restaurants with proper error handling.\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                const restaurant = restaurants.find(r => r.id == id);\r\n                if (restaurant) { // Got the restaurant\r\n                    callback(null, restaurant);\r\n                } else { // Restaurant does not exist in the database\r\n                    callback('Restaurant does not exist', null);\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine type with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisine(cuisine, callback) {\r\n        // Fetch all restaurants  with proper error handling\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given cuisine type\r\n                const results = restaurants.filter(r => r.cuisine_type == cuisine);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByNeighborhood(neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Filter restaurants to have only given neighborhood\r\n                const results = restaurants.filter(r => r.neighborhood == neighborhood);\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch restaurants by a cuisine and a neighborhood with proper error handling.\r\n     */\r\n    static fetchRestaurantByCuisineAndNeighborhood(cuisine, neighborhood, callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                let results = restaurants\r\n                if (cuisine != 'all') { // filter by cuisine\r\n                    results = results.filter(r => r.cuisine_type == cuisine);\r\n                }\r\n                if (neighborhood != 'all') { // filter by neighborhood\r\n                    results = results.filter(r => r.neighborhood == neighborhood);\r\n                }\r\n                callback(null, results);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all neighborhoods with proper error handling.\r\n     */\r\n    static fetchNeighborhoods(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all neighborhoods from all restaurants\r\n                const neighborhoods = restaurants.map((v, i) => restaurants[i].neighborhood)\r\n                    // Remove duplicates from neighborhoods\r\n                const uniqueNeighborhoods = neighborhoods.filter((v, i) => neighborhoods.indexOf(v) == i)\r\n                callback(null, uniqueNeighborhoods);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Fetch all cuisines with proper error handling.\r\n     */\r\n    static fetchCuisines(callback) {\r\n        // Fetch all restaurants\r\n        DBHelper.fetchRestaurants((error, restaurants) => {\r\n            if (error) {\r\n                callback(error, null);\r\n            } else {\r\n                // Get all cuisines from all restaurants\r\n                const cuisines = restaurants.map((v, i) => restaurants[i].cuisine_type)\r\n                    // Remove duplicates from cuisines\r\n                const uniqueCuisines = cuisines.filter((v, i) => cuisines.indexOf(v) == i)\r\n                callback(null, uniqueCuisines);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Restaurant page URL.\r\n     */\r\n    static urlForRestaurant(restaurant) {\r\n        return (`./restaurant.html?id=${restaurant.id}`);\r\n    }\r\n\r\n    // /**\r\n    //  * Restaurant image URL.\r\n    //  */\r\n    // static imageUrlForRestaurant(restaurant) {\r\n    //     return (`/img/${restaurant.photograph}`);\r\n    // }\r\n\r\n    /**\r\n     * Restaurant image URL.\r\n     */\r\n    static imageUrlForRestaurant(restaurant, imgWidth = null) {\r\n        if (imgWidth !== null) {\r\n            return `/build/img/${restaurant.id}-${imgWidth}.jpg`;\r\n        }\r\n        return `/build/img/${restaurant.id}-original.jpg`;\r\n\r\n        //return (`/img/${restaurant.photograph}`);\r\n    }\r\n\r\n    /**\r\n     * Restaurant image SRCSET.\r\n     */\r\n    static imageSrcSetForRestaurant(restaurant) {\r\n        const widthXsmall = DBHelper.imageUrlForRestaurant(restaurant, 'xsmall');\r\n        const widthSmall = DBHelper.imageUrlForRestaurant(restaurant, 'small');\r\n        const widthMedium = DBHelper.imageUrlForRestaurant(restaurant, 'medium');\r\n        const widthLarge = DBHelper.imageUrlForRestaurant(restaurant, 'large');\r\n        const widthOriginal = DBHelper.imageUrlForRestaurant(restaurant);\r\n        const imageSrcSet = `${widthXsmall} 360w, ${widthSmall} 520w, ${widthMedium} 800w, ${widthLarge} 1000w, ${widthOriginal} 1500w`;\r\n        return imageSrcSet;\r\n    }\r\n\r\n    /**\r\n     * Map marker for a restaurant.\r\n     */\r\n    static mapMarkerForRestaurant(restaurant, map) {\r\n        const marker = new google.maps.Marker({\r\n            position: restaurant.latlng,\r\n            title: restaurant.name,\r\n            url: DBHelper.urlForRestaurant(restaurant),\r\n            map: map,\r\n            animation: google.maps.Animation.DROP\r\n        });\r\n        return marker;\r\n    }\r\n\r\n}"]}